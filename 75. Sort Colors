Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

Approach 1 :
Simply sort the array but this is silly method dont used it in interview 
Time complexity : O(nlogn)  if you used sort function
space Complexity : O(1)

Approach 2 :
Traverse the array while traversing it count the number of zeros , ones and twos and simlpy create new array and put this zeros , ones and twos in that array 
Time Complexity : O(n) + O(n) = O(n)
Space Complexity : O(n)

Approach 3 : Most Optimized Approach ----- > Famous DNF Algorithms (dutch national flag algorithm)
In this algo we maintain the pointer start at 0 index of array , mid also at zero index of array and end at last index of array (n-1)

While traversing the array simlpy do 3 things 
continue this proces until mid<=e
1) if nums[mid] == 0  swap nums[mid] and nums[s]  and move both pointer by 1
2) if nums[mid] ==1 simply move mid by 1
3) if nums[mid] == 2 swap nums[mid] and nums[e] and move e by 1 (e--)

Time Complexity : O(n)
Space Complexity : Constant 

code :

class Solution {
public:
    void sortColors(vector<int>& nums) {
        // three pointer --> low , mid , high 
        
        // nums[0] to nums[l-1]  --- for zeros
        // nums[l] to nums[mid-1] --- for ones
        // nums[mid] to nums[high] --  unknows
        // nums[high+1] to nums[n-1] --- for twos
        
        int n = nums.size();
        int low = 0, mid=0, high = n-1;
        
        while(mid<=high){
            if(nums[mid]==0) swap(nums[low++], nums[mid++]);
            
           else if(nums[mid]==1) mid++;
            
            else swap(nums[mid], nums[high--]);
       }
    }
};
